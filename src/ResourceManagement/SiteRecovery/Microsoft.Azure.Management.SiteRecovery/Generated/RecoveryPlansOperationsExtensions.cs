// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RecoveryPlansOperations.
    /// </summary>
    public static partial class RecoveryPlansOperationsExtensions
    {
            /// <summary>
            /// Tracks the recovery plan async operation.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='jobName'>
            /// ARM name of the job.
            /// </param>
            public static RecoveryPlan TrackAsyncOperation(this IRecoveryPlansOperations operations, string recoveryPlanName, string jobName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).TrackAsyncOperationAsync(recoveryPlanName, jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tracks the recovery plan async operation.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='jobName'>
            /// ARM name of the job.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> TrackAsyncOperationAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TrackAsyncOperationWithHttpMessagesAsync(recoveryPlanName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static RecoveryPlan Reprotect(this IRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).ReprotectAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> ReprotectAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReprotectWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static RecoveryPlan BeginReprotect(this IRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginReprotectAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginReprotectAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginReprotectWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static RecoveryPlan FailoverCommit(this IRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).FailoverCommitAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> FailoverCommitAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FailoverCommitWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static RecoveryPlan BeginFailoverCommit(this IRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginFailoverCommitAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginFailoverCommitAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginFailoverCommitWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover cleanup of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Test failover cleanup input.
            /// </param>
            public static RecoveryPlan TestFailoverCleanup(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).TestFailoverCleanupAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover cleanup of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Test failover cleanup input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> TestFailoverCleanupAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestFailoverCleanupWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover cleanup of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Test failover cleanup input.
            /// </param>
            public static RecoveryPlan BeginTestFailoverCleanup(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginTestFailoverCleanupAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover cleanup of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Test failover cleanup input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginTestFailoverCleanupAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverCleanupInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestFailoverCleanupWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan TestFailover(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).TestFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> TestFailoverAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TestFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan BeginTestFailover(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginTestFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginTestFailoverAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTestFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan UnplannedFailover(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).UnplannedFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> UnplannedFailoverAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnplannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan BeginUnplannedFailover(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginUnplannedFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginUnplannedFailoverAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUnplannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan PlannedFailover(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).PlannedFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> PlannedFailoverAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PlannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static RecoveryPlan BeginPlannedFailover(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginPlannedFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginPlannedFailoverAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPlannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the requested recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Unique name of the recovery plan.
            /// </param>
            public static RecoveryPlan Get(this IRecoveryPlansOperations operations, string recoveryPlanName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).GetAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the requested recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Unique name of the recovery plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> GetAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            public static RecoveryPlan Create(this IRecoveryPlansOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).CreateAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> CreateAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            public static RecoveryPlan BeginCreate(this IRecoveryPlansOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginCreateAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginCreateAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static void Delete(this IRecoveryPlansOperations operations, string recoveryPlanName)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).DeleteAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static void BeginDelete(this IRecoveryPlansOperations operations, string recoveryPlanName)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginDeleteAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            public static RecoveryPlan Update(this IRecoveryPlansOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).UpdateAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> UpdateAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            public static RecoveryPlan BeginUpdate(this IRecoveryPlansOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).BeginUpdateAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> BeginUpdateAsync(this IRecoveryPlansOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<RecoveryPlan> List(this IRecoveryPlansOperations operations)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryPlan>> ListAsync(this IRecoveryPlansOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RecoveryPlan> ListNext(this IRecoveryPlansOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryPlan>> ListNextAsync(this IRecoveryPlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
