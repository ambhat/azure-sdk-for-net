// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// JobsOperations operations.
    /// </summary>
    public partial interface IJobsOperations
    {
        /// <summary>
        /// Tracks the Site async operation.
        /// </summary>
        /// <param name='name'>
        /// Original Job id on which resume/restart was called.
        /// </param>
        /// <param name='jobName'>
        /// job id to track.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> TrackAsyncOperationWithHttpMessagesAsync(string name, string jobName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Resumes the specified job.
        /// </summary>
        /// <param name='jobName'>
        /// Job Id to resume.
        /// </param>
        /// <param name='resumeJobParams'>
        /// Resume rob comments.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> DeployProcessServerImageWithHttpMessagesAsync(string jobName, ResumeJobParams resumeJobParams, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Restarts the specified job.
        /// </summary>
        /// <param name='jobName'>
        /// Job Id to restart.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> RestartWithHttpMessagesAsync(string jobName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Cancels the specified job.
        /// </summary>
        /// <param name='jobName'>
        /// Job Id to cancel.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> CancelWithHttpMessagesAsync(string jobName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the job details.
        /// </summary>
        /// <param name='jobName'>
        /// Job Id to look details for.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<Job>> GetWithHttpMessagesAsync(string jobName, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets "ExportJobs" workflow details.
        /// Old method: Two APIs were exposed for performing
        /// export jobs, one api
        /// (subscriptions/workflow/computeWorkflowHistory) to
        /// trigger the export jobs workflow and
        /// another api to get the blob information after the
        /// workflow has completed successfully
        /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
        /// New Method: Only one API is exposed to trigger export
        /// jobs workflow, which will trigger
        /// the export jobs workflow, however in order to store
        /// the blob information(blobUri and
        /// sas token) the CustomDetails field associated with the
        /// JobProperties (in Job Object)
        /// is being used. This will be set once the export jobs
        /// workflow completes successfully.
        /// Within custom details, instanceType is set to
        /// "ExportJobsDetails" and fields
        /// "blobUri" and "sasToken" contains the required
        /// information that is necessary to access
        /// exported jobs data.
        /// Note:
        /// 1. Current Implementation only supports one type of
        /// AffectedObjectType and one value
        /// for WorkflowStatus for the filer. Hence the current
        /// implementation only uses the first
        /// value in the corresponding lists.
        /// 2. A dummy Job Entity is created in the Jobs table
        /// (this is marked as internal job)
        /// This job entity can be identified by the Scenario Name
        /// which is set to
        /// "ScenarioName.ExportsJobs".
        /// </summary>
        /// <param name='jobQueryParameter'>
        /// job query filter.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse> ExportWithHttpMessagesAsync(JobQueryParameter jobQueryParameter, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the list of jobs.
        /// </summary>
        /// <param name='odataQuery'>
        /// OData parameters to apply to the operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<Job>>> ListWithHttpMessagesAsync(ODataQuery<JobQueryParameter> odataQuery = default(ODataQuery<JobQueryParameter>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Gets the list of jobs.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<AzureOperationResponse<IPage<Job>>> ListNextWithHttpMessagesAsync(string nextPageLink, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
