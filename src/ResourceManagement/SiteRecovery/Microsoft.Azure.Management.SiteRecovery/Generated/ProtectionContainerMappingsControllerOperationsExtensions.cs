// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ProtectionContainerMappingsControllerOperations.
    /// </summary>
    public static partial class ProtectionContainerMappingsControllerOperationsExtensions
    {
            /// <summary>
            /// Remove container mapping.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            public static void RemoveProtectionContainerMapping(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput)
            {
                Task.Factory.StartNew(s => ((IProtectionContainerMappingsControllerOperations)s).RemoveProtectionContainerMappingAsync(fabricName, protectionContainerName, mappingName, removalInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove container mapping.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveProtectionContainerMappingAsync(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RemoveProtectionContainerMappingWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, removalInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Container mapping ARM name.
            /// </param>
            public static ProtectionContainerMapping GetProtectionContainerMapping(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, string mappingName)
            {
                return Task.Factory.StartNew(s => ((IProtectionContainerMappingsControllerOperations)s).GetProtectionContainerMappingAsync(fabricName, protectionContainerName, mappingName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Container mapping ARM name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> GetProtectionContainerMappingAsync(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, string mappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProtectionContainerMappingWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            public static void CreateProtectionContainerMapping(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput)
            {
                Task.Factory.StartNew(s => ((IProtectionContainerMappingsControllerOperations)s).CreateProtectionContainerMappingAsync(fabricName, protectionContainerName, mappingName, creationInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateProtectionContainerMappingAsync(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateProtectionContainerMappingWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, creationInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Purges protection container mapping.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            public static void PurgeProtectionContainerMapping(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, string mappingName)
            {
                Task.Factory.StartNew(s => ((IProtectionContainerMappingsControllerOperations)s).PurgeProtectionContainerMappingAsync(fabricName, protectionContainerName, mappingName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges protection container mapping.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeProtectionContainerMappingAsync(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, string mappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PurgeProtectionContainerMappingWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container name.
            /// </param>
            public static IPage<ProtectionContainerMapping> EnumerateProtectionContainerMappings(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName)
            {
                return Task.Factory.StartNew(s => ((IProtectionContainerMappingsControllerOperations)s).EnumerateProtectionContainerMappingsAsync(fabricName, protectionContainerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> EnumerateProtectionContainerMappingsAsync(this IProtectionContainerMappingsControllerOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateProtectionContainerMappingsWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ProtectionContainerMapping> EnumerateAllProtectionContainerMappings(this IProtectionContainerMappingsControllerOperations operations)
            {
                return Task.Factory.StartNew(s => ((IProtectionContainerMappingsControllerOperations)s).EnumerateAllProtectionContainerMappingsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> EnumerateAllProtectionContainerMappingsAsync(this IProtectionContainerMappingsControllerOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateAllProtectionContainerMappingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProtectionContainerMapping> EnumerateProtectionContainerMappingsNext(this IProtectionContainerMappingsControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IProtectionContainerMappingsControllerOperations)s).EnumerateProtectionContainerMappingsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> EnumerateProtectionContainerMappingsNextAsync(this IProtectionContainerMappingsControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateProtectionContainerMappingsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProtectionContainerMapping> EnumerateAllProtectionContainerMappingsNext(this IProtectionContainerMappingsControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IProtectionContainerMappingsControllerOperations)s).EnumerateAllProtectionContainerMappingsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> EnumerateAllProtectionContainerMappingsNextAsync(this IProtectionContainerMappingsControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateAllProtectionContainerMappingsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
