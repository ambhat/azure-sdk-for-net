// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationProtectedItemsOperations.
    /// </summary>
    public static partial class ReplicationProtectedItemsOperationsExtensions
    {
            /// <summary>
            /// Applies recovery point.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The ARM fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The replicated protected item's name.
            /// </param>
            /// <param name='applyRecoveryPointInput'>
            /// The ApplyRecoveryPointInput.
            /// </param>
            public static void ApplyRecoveryPoint(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).ApplyRecoveryPointAsync(fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies recovery point.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The ARM fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The replicated protected item's name.
            /// </param>
            /// <param name='applyRecoveryPointInput'>
            /// The ApplyRecoveryPointInput.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApplyRecoveryPointAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApplyRecoveryPointWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Applies recovery point.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The ARM fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The replicated protected item's name.
            /// </param>
            /// <param name='applyRecoveryPointInput'>
            /// The ApplyRecoveryPointInput.
            /// </param>
            public static void BeginApplyRecoveryPoint(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginApplyRecoveryPointAsync(fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies recovery point.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The ARM fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The replicated protected item's name.
            /// </param>
            /// <param name='applyRecoveryPointInput'>
            /// The ApplyRecoveryPointInput.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginApplyRecoveryPointAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginApplyRecoveryPointWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Repairs replication.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the replication protected item.
            /// </param>
            public static void RepairReplication(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).RepairReplicationAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Repairs replication.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the replication protected item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RepairReplicationAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RepairReplicationWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Repairs replication.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the replication protected item.
            /// </param>
            public static void BeginRepairReplication(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginRepairReplicationAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Repairs replication.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the replication protected item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRepairReplicationAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginRepairReplicationWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update the mobility service on a protected machine.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the machine.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container containing the machine.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the machine on which the agent
            /// is to be updated.
            /// </param>
            /// <param name='updateMobilityServiceRequest'>
            /// Request to update the mobility
            /// service on the machine.
            /// </param>
            public static void UpdateMobilityService(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).UpdateMobilityServiceAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the mobility service on a protected machine.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the machine.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container containing the machine.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the machine on which the agent
            /// is to be updated.
            /// </param>
            /// <param name='updateMobilityServiceRequest'>
            /// Request to update the mobility
            /// service on the machine.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateMobilityServiceAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateMobilityServiceWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Update the mobility service on a protected machine.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the machine.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container containing the machine.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the machine on which the agent
            /// is to be updated.
            /// </param>
            /// <param name='updateMobilityServiceRequest'>
            /// Request to update the mobility
            /// service on the machine.
            /// </param>
            public static void BeginUpdateMobilityService(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginUpdateMobilityServiceAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the mobility service on a protected machine.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the machine.
            /// </param>
            /// <param name='protectionContainerName'>
            /// The name of the container containing the machine.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// The name of the machine on which the agent
            /// is to be updated.
            /// </param>
            /// <param name='updateMobilityServiceRequest'>
            /// Request to update the mobility
            /// service on the machine.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginUpdateMobilityServiceAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginUpdateMobilityServiceWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute Reverse Replication\\\\Reprotect
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='rrInput'>
            /// Disable protection input.
            /// </param>
            public static void Reprotect(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInput rrInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).ReprotectAsync(fabricName, protectionContainerName, replicatedProtectedItemName, rrInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Reverse Replication\\\\Reprotect
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='rrInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReprotectAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInput rrInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ReprotectWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, rrInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute Reverse Replication\\\\Reprotect
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='rrInput'>
            /// Disable protection input.
            /// </param>
            public static void BeginReprotect(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInput rrInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginReprotectAsync(fabricName, protectionContainerName, replicatedProtectedItemName, rrInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Reverse Replication\\\\Reprotect
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='rrInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginReprotectAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInput rrInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginReprotectWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, rrInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute commit failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static void FailoverCommit(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).FailoverCommitAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task FailoverCommitAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.FailoverCommitWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute commit failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static void BeginFailoverCommit(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginFailoverCommitAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginFailoverCommitAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginFailoverCommitWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute test failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            public static void TestFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).TestFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TestFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.TestFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute test failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            public static void BeginTestFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginTestFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginTestFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginTestFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute unplanned failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            public static void UnplannedFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).UnplannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnplannedFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UnplannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute unplanned failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            public static void BeginUnplannedFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginUnplannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginUnplannedFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginUnplannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute planned failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            public static void PlannedFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).PlannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PlannedFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PlannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute planned failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            public static void BeginPlannedFailover(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginPlannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='failoverInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPlannedFailoverAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginPlannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Disables protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='disableProtectionInput'>
            /// Disable protection input.
            /// </param>
            public static void Delete(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInput disableProtectionInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).DeleteAsync(fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='disableProtectionInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInput disableProtectionInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Disables protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='disableProtectionInput'>
            /// Disable protection input.
            /// </param>
            public static void BeginDelete(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInput disableProtectionInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginDeleteAsync(fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='disableProtectionInput'>
            /// Disable protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInput disableProtectionInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the details of a Replication protected item.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static ReplicationProtectedItem Get(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).GetAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a Replication protected item.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> GetAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Enables protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='input'>
            /// Enable Protection Input.
            /// </param>
            public static void Create(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInput input)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).CreateAsync(fabricName, protectionContainerName, replicatedProtectedItemName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='input'>
            /// Enable Protection Input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Enables protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='input'>
            /// Enable Protection Input.
            /// </param>
            public static void BeginCreate(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInput input)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginCreateAsync(fabricName, protectionContainerName, replicatedProtectedItemName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique name of the fabric.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='input'>
            /// Enable Protection Input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginCreateAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginCreateWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Purges protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static void Purge(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).PurgeAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PurgeWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Purges protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            public static void BeginPurge(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginPurgeAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPurgeAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginPurgeWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='updateProtectionInput'>
            /// Update protection input.
            /// </param>
            public static void Update(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).UpdateAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='updateProtectionInput'>
            /// Update protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='updateProtectionInput'>
            /// Update protection input.
            /// </param>
            public static void BeginUpdate(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).BeginUpdateAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates protection.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// Replication protected item name.
            /// </param>
            /// <param name='updateProtectionInput'>
            /// Update protection input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginUpdateAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginUpdateWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of Replication protected items.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            public static IPage<ReplicationProtectedItem> ListByProtectionContainer(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).ListByProtectionContainerAsync(fabricName, protectionContainerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of Replication protected items.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> ListByProtectionContainerAsync(this IReplicationProtectedItemsOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProtectionContainerWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of replication protected items.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// The pagination token.
            /// Possible values: "FabricId" or "FabricId_CloudId" or null
            /// </param>
            public static IPage<ReplicationProtectedItem> List(this IReplicationProtectedItemsOperations operations, string skipToken = default(string))
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).ListAsync(skipToken), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of replication protected items.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// The pagination token.
            /// Possible values: "FabricId" or "FabricId_CloudId" or null
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> ListAsync(this IReplicationProtectedItemsOperations operations, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of Replication protected items.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ReplicationProtectedItem> ListByProtectionContainerNext(this IReplicationProtectedItemsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).ListByProtectionContainerNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of Replication protected items.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> ListByProtectionContainerNextAsync(this IReplicationProtectedItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProtectionContainerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of replication protected items.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ReplicationProtectedItem> ListNext(this IReplicationProtectedItemsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of replication protected items.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> ListNextAsync(this IReplicationProtectedItemsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
