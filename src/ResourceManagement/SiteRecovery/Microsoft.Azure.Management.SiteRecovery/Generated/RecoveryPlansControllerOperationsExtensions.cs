// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RecoveryPlansControllerOperations.
    /// </summary>
    public static partial class RecoveryPlansControllerOperationsExtensions
    {
            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static void RecoveryPlanReprotect(this IRecoveryPlansControllerOperations operations, string recoveryPlanName)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).RecoveryPlanReprotectAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute reprotect of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoveryPlanReprotectAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RecoveryPlanReprotectWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static void RecoveryPlanFailoverCommit(this IRecoveryPlansControllerOperations operations, string recoveryPlanName)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).RecoveryPlanFailoverCommitAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute commit failover of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoveryPlanFailoverCommitAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RecoveryPlanFailoverCommitWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static void RecoveryPlanTestFailover(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).RecoveryPlanTestFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute test failover of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoveryPlanTestFailoverAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, RecoveryPlanTestFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RecoveryPlanTestFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static void RecoveryPlanUnplannedFailover(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).RecoveryPlanUnplannedFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute unplanned failover of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoveryPlanUnplannedFailoverAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, RecoveryPlanUnplannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RecoveryPlanUnplannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            public static void RecoveryPlanPlannedFailover(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).RecoveryPlanPlannedFailoverAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute planned failover of the recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Failover input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RecoveryPlanPlannedFailoverAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, RecoveryPlanPlannedFailoverInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RecoveryPlanPlannedFailoverWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the requested recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Unique name of the recovery plan.
            /// </param>
            public static RecoveryPlan GetRecoveryPlan(this IRecoveryPlansControllerOperations operations, string recoveryPlanName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).GetRecoveryPlanAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the requested recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Unique name of the recovery plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryPlan> GetRecoveryPlanAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRecoveryPlanWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            public static void CreateRecoveryPlan(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).CreateRecoveryPlanAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a recovery plan with the given details.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Recovery Plan creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateRecoveryPlanAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, CreateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateRecoveryPlanWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            public static void DeleteRecoveryPlan(this IRecoveryPlansControllerOperations operations, string recoveryPlanName)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).DeleteRecoveryPlanAsync(recoveryPlanName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteRecoveryPlanAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteRecoveryPlanWithHttpMessagesAsync(recoveryPlanName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            public static void UpdateRecoveryPlan(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input)
            {
                Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).UpdateRecoveryPlanAsync(recoveryPlanName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the given recovery plan.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='recoveryPlanName'>
            /// Recovery plan name.
            /// </param>
            /// <param name='input'>
            /// Update recovery plan input
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateRecoveryPlanAsync(this IRecoveryPlansControllerOperations operations, string recoveryPlanName, UpdateRecoveryPlanInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateRecoveryPlanWithHttpMessagesAsync(recoveryPlanName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<RecoveryPlan> EnumerateRecoveryPlans(this IRecoveryPlansControllerOperations operations)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).EnumerateRecoveryPlansAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryPlan>> EnumerateRecoveryPlansAsync(this IRecoveryPlansControllerOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateRecoveryPlansWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RecoveryPlan> EnumerateRecoveryPlansNext(this IRecoveryPlansControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IRecoveryPlansControllerOperations)s).EnumerateRecoveryPlansNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of recovery plans.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryPlan>> EnumerateRecoveryPlansNextAsync(this IRecoveryPlansControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateRecoveryPlansNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
