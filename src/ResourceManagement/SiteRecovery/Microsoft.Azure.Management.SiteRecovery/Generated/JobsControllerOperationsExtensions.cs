// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for JobsControllerOperations.
    /// </summary>
    public static partial class JobsControllerOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='jobName'>
            /// </param>
            public static void TrackAsyncJobOperation(this IJobsControllerOperations operations, string name, string jobName)
            {
                Task.Factory.StartNew(s => ((IJobsControllerOperations)s).TrackAsyncJobOperationAsync(name, jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='jobName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TrackAsyncJobOperationAsync(this IJobsControllerOperations operations, string name, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.TrackAsyncJobOperationWithHttpMessagesAsync(name, jobName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// </param>
            /// <param name='resumeJobParams'>
            /// </param>
            public static void DeployProcessServerImage(this IJobsControllerOperations operations, string jobName, ResumeJobParams resumeJobParams)
            {
                Task.Factory.StartNew(s => ((IJobsControllerOperations)s).DeployProcessServerImageAsync(jobName, resumeJobParams), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// </param>
            /// <param name='resumeJobParams'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeployProcessServerImageAsync(this IJobsControllerOperations operations, string jobName, ResumeJobParams resumeJobParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeployProcessServerImageWithHttpMessagesAsync(jobName, resumeJobParams, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// </param>
            public static void RestartJob(this IJobsControllerOperations operations, string jobName)
            {
                Task.Factory.StartNew(s => ((IJobsControllerOperations)s).RestartJobAsync(jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartJobAsync(this IJobsControllerOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RestartJobWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// </param>
            public static void CancelJob(this IJobsControllerOperations operations, string jobName)
            {
                Task.Factory.StartNew(s => ((IJobsControllerOperations)s).CancelJobAsync(jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelJobAsync(this IJobsControllerOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CancelJobWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// </param>
            public static Job GetJob(this IJobsControllerOperations operations, string jobName)
            {
                return Task.Factory.StartNew(s => ((IJobsControllerOperations)s).GetJobAsync(jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetJobAsync(this IJobsControllerOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetJobWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// </param>
            public static void ExportJobs(this IJobsControllerOperations operations, JobQueryParameter jobQueryParameter)
            {
                Task.Factory.StartNew(s => ((IJobsControllerOperations)s).ExportJobsAsync(jobQueryParameter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExportJobsAsync(this IJobsControllerOperations operations, JobQueryParameter jobQueryParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ExportJobsWithHttpMessagesAsync(jobQueryParameter, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Job> EnumerateJobs(this IJobsControllerOperations operations, ODataQuery<JobQueryParameter> odataQuery = default(ODataQuery<JobQueryParameter>))
            {
                return Task.Factory.StartNew(s => ((IJobsControllerOperations)s).EnumerateJobsAsync(odataQuery), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> EnumerateJobsAsync(this IJobsControllerOperations operations, ODataQuery<JobQueryParameter> odataQuery = default(ODataQuery<JobQueryParameter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateJobsWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> EnumerateJobsNext(this IJobsControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IJobsControllerOperations)s).EnumerateJobsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> EnumerateJobsNextAsync(this IJobsControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateJobsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
