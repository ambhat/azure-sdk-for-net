// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProtectionContainerMappingsOperations.
    /// </summary>
    public static partial class ProtectionContainerMappingsOperationsExtensions
    {
            /// <summary>
            /// Tracks the protection container mapping async operation.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Container mapping ARM name.
            /// </param>
            /// <param name='jobId'>
            /// job id to track.
            /// </param>
            public static ProtectionContainerMapping GetTrackAsyncOperation(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, string jobId)
            {
                return operations.GetTrackAsyncOperationAsync(fabricName, protectionContainerName, mappingName, jobId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tracks the protection container mapping async operation.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Container mapping ARM name.
            /// </param>
            /// <param name='jobId'>
            /// job id to track.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> GetTrackAsyncOperationAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, string jobId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrackAsyncOperationWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, jobId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            public static void Delete(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput)
            {
                operations.DeleteAsync(fabricName, protectionContainerName, mappingName, removalInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, removalInput, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Container mapping ARM name.
            /// </param>
            public static ProtectionContainerMapping Get(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName)
            {
                return operations.GetAsync(fabricName, protectionContainerName, mappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container name.
            /// </param>
            /// <param name='mappingName'>
            /// Container mapping ARM name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> GetAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            public static ProtectionContainerMapping Create(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput)
            {
                return operations.CreateAsync(fabricName, protectionContainerName, mappingName, creationInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> CreateAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, creationInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purges protection container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            public static void Purge(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName)
            {
                operations.PurgeAsync(fabricName, protectionContainerName, mappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges protection container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PurgeWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container name.
            /// </param>
            public static IPage<ProtectionContainerMapping> ListByProtectionContainer(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName)
            {
                return operations.ListByProtectionContainerAsync(fabricName, protectionContainerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Fabric unique ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> ListByProtectionContainerAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProtectionContainerWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<ProtectionContainerMapping> List(this IProtectionContainerMappingsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> ListAsync(this IProtectionContainerMappingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            public static void BeginDelete(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput)
            {
                operations.BeginDeleteAsync(fabricName, protectionContainerName, mappingName, removalInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='removalInput'>
            /// Removal input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, RemoveProtectionContainerMappingInput removalInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, removalInput, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            public static ProtectionContainerMapping BeginCreate(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput)
            {
                return operations.BeginCreateAsync(fabricName, protectionContainerName, mappingName, creationInput).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create protection container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='creationInput'>
            /// Mapping creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProtectionContainerMapping> BeginCreateAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CreateProtectionContainerMappingInput creationInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, creationInput, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purges protection container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            public static void BeginPurge(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName)
            {
                operations.BeginPurgeAsync(fabricName, protectionContainerName, mappingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges protection container mapping.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric ARM name.
            /// </param>
            /// <param name='protectionContainerName'>
            /// Unique protection container ARM name.
            /// </param>
            /// <param name='mappingName'>
            /// Unique protection container mapping name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPurgeAsync(this IProtectionContainerMappingsOperations operations, string fabricName, string protectionContainerName, string mappingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginPurgeWithHttpMessagesAsync(fabricName, protectionContainerName, mappingName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProtectionContainerMapping> ListByProtectionContainerNext(this IProtectionContainerMappingsOperations operations, string nextPageLink)
            {
                return operations.ListByProtectionContainerNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of mappings under a container.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> ListByProtectionContainerNextAsync(this IProtectionContainerMappingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProtectionContainerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProtectionContainerMapping> ListNext(this IProtectionContainerMappingsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of all protection container mappings in a vault.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProtectionContainerMapping>> ListNextAsync(this IProtectionContainerMappingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
