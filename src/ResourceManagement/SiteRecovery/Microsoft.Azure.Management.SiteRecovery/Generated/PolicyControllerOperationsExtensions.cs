// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PolicyControllerOperations.
    /// </summary>
    public static partial class PolicyControllerOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyName'>
            /// </param>
            public static Policy GetPolicy(this IPolicyControllerOperations operations, string policyName)
            {
                return Task.Factory.StartNew(s => ((IPolicyControllerOperations)s).GetPolicyAsync(policyName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Policy> GetPolicyAsync(this IPolicyControllerOperations operations, string policyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPolicyWithHttpMessagesAsync(policyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyName'>
            /// </param>
            /// <param name='input'>
            /// </param>
            public static void CreatePolicy(this IPolicyControllerOperations operations, string policyName, CreatePolicyInput input)
            {
                Task.Factory.StartNew(s => ((IPolicyControllerOperations)s).CreatePolicyAsync(policyName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyName'>
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreatePolicyAsync(this IPolicyControllerOperations operations, string policyName, CreatePolicyInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreatePolicyWithHttpMessagesAsync(policyName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyName'>
            /// </param>
            public static void DeletePolicy(this IPolicyControllerOperations operations, string policyName)
            {
                Task.Factory.StartNew(s => ((IPolicyControllerOperations)s).DeletePolicyAsync(policyName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePolicyAsync(this IPolicyControllerOperations operations, string policyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeletePolicyWithHttpMessagesAsync(policyName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyName'>
            /// </param>
            /// <param name='input'>
            /// </param>
            public static void UpdatePolicy(this IPolicyControllerOperations operations, string policyName, UpdatePolicyInput input)
            {
                Task.Factory.StartNew(s => ((IPolicyControllerOperations)s).UpdatePolicyAsync(policyName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='policyName'>
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdatePolicyAsync(this IPolicyControllerOperations operations, string policyName, UpdatePolicyInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdatePolicyWithHttpMessagesAsync(policyName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Policy> EnumeratePolicies(this IPolicyControllerOperations operations)
            {
                return Task.Factory.StartNew(s => ((IPolicyControllerOperations)s).EnumeratePoliciesAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Policy>> EnumeratePoliciesAsync(this IPolicyControllerOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumeratePoliciesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Policy> EnumeratePoliciesNext(this IPolicyControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IPolicyControllerOperations)s).EnumeratePoliciesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Policy>> EnumeratePoliciesNextAsync(this IPolicyControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumeratePoliciesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
