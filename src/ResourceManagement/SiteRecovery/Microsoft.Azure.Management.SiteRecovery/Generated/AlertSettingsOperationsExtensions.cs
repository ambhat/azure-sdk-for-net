// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AlertSettingsOperations.
    /// </summary>
    public static partial class AlertSettingsOperationsExtensions
    {
            /// <summary>
            /// Gets an alert setting.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertSettingName'>
            /// The name of the alert setting.
            /// </param>
            public static Alert Get(this IAlertSettingsOperations operations, string alertSettingName)
            {
                return Task.Factory.StartNew(s => ((IAlertSettingsOperations)s).GetAsync(alertSettingName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an alert setting.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertSettingName'>
            /// The name of the alert setting.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Alert> GetAsync(this IAlertSettingsOperations operations, string alertSettingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(alertSettingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Configures the alerts for this vault.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertSettingName'>
            /// The name of the alert
            /// setting.
            /// </param>
            /// <param name='request'>
            /// The input to configure the alerts.
            /// </param>
            public static Alert Create(this IAlertSettingsOperations operations, string alertSettingName, ConfigureAlertRequest request)
            {
                return Task.Factory.StartNew(s => ((IAlertSettingsOperations)s).CreateAsync(alertSettingName, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Configures the alerts for this vault.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alertSettingName'>
            /// The name of the alert
            /// setting.
            /// </param>
            /// <param name='request'>
            /// The input to configure the alerts.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Alert> CreateAsync(this IAlertSettingsOperations operations, string alertSettingName, ConfigureAlertRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(alertSettingName, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of alerts.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Alert> List(this IAlertSettingsOperations operations)
            {
                return Task.Factory.StartNew(s => ((IAlertSettingsOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of alerts.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Alert>> ListAsync(this IAlertSettingsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of alerts.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Alert> ListNext(this IAlertSettingsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAlertSettingsOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of alerts.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Alert>> ListNextAsync(this IAlertSettingsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
