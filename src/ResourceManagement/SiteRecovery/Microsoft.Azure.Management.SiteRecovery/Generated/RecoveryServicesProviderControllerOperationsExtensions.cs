// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RecoveryServicesProviderControllerOperations.
    /// </summary>
    public static partial class RecoveryServicesProviderControllerOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='providerName'>
            /// </param>
            public static void RefreshProvider(this IRecoveryServicesProviderControllerOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderControllerOperations)s).RefreshProviderAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='providerName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RefreshProviderAsync(this IRecoveryServicesProviderControllerOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RefreshProviderWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='providerName'>
            /// </param>
            public static void DeleteProvider(this IRecoveryServicesProviderControllerOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderControllerOperations)s).DeleteProviderAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='providerName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProviderAsync(this IRecoveryServicesProviderControllerOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteProviderWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='providerName'>
            /// </param>
            public static RecoveryServicesProvider GetProvider(this IRecoveryServicesProviderControllerOperations operations, string fabricName, string providerName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderControllerOperations)s).GetProviderAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='providerName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryServicesProvider> GetProviderAsync(this IRecoveryServicesProviderControllerOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProviderWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='providerName'>
            /// </param>
            public static void PurgeProvider(this IRecoveryServicesProviderControllerOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderControllerOperations)s).PurgeProviderAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='providerName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeProviderAsync(this IRecoveryServicesProviderControllerOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PurgeProviderWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            public static IPage<RecoveryServicesProvider> EnumerateProviders(this IRecoveryServicesProviderControllerOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderControllerOperations)s).EnumerateProvidersAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryServicesProvider>> EnumerateProvidersAsync(this IRecoveryServicesProviderControllerOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateProvidersWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<RecoveryServicesProvider> EnumerateAllProviders(this IRecoveryServicesProviderControllerOperations operations)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderControllerOperations)s).EnumerateAllProvidersAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryServicesProvider>> EnumerateAllProvidersAsync(this IRecoveryServicesProviderControllerOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateAllProvidersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RecoveryServicesProvider> EnumerateProvidersNext(this IRecoveryServicesProviderControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderControllerOperations)s).EnumerateProvidersNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryServicesProvider>> EnumerateProvidersNextAsync(this IRecoveryServicesProviderControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateProvidersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RecoveryServicesProvider> EnumerateAllProvidersNext(this IRecoveryServicesProviderControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderControllerOperations)s).EnumerateAllProvidersNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryServicesProvider>> EnumerateAllProvidersNextAsync(this IRecoveryServicesProviderControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateAllProvidersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
