// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReplicationProtectedItemsControllerOperations.
    /// </summary>
    public static partial class ReplicationProtectedItemsControllerOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='applyRecoveryPointInput'>
            /// </param>
            public static void ApplyRecoveryPoint(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).ApplyRecoveryPointAsync(fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='applyRecoveryPointInput'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApplyRecoveryPointAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ApplyRecoveryPointInput applyRecoveryPointInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApplyRecoveryPointWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, applyRecoveryPointInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            public static void RepairReplication(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).RepairReplicationAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RepairReplicationAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RepairReplicationWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='updateMobilityServiceRequest'>
            /// </param>
            public static void UpdateMobilityService(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).UpdateMobilityServiceAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='updateMobilityServiceRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateMobilityServiceAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateMobilityServiceRequest updateMobilityServiceRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateMobilityServiceWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateMobilityServiceRequest, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='rrInput'>
            /// </param>
            public static void Reprotect(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInput rrInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).ReprotectAsync(fabricName, protectionContainerName, replicatedProtectedItemName, rrInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='rrInput'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ReprotectAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, ReverseReplicationInput rrInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ReprotectWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, rrInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            public static void CommitFailover(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).CommitFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CommitFailoverAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CommitFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='failoverInput'>
            /// </param>
            public static void TestFailover(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).TestFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='failoverInput'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TestFailoverAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, TestFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.TestFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='failoverInput'>
            /// </param>
            public static void UnplannedFailover(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).UnplannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='failoverInput'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnplannedFailoverAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UnplannedFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UnplannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='failoverInput'>
            /// </param>
            public static void PlannedFailover(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInput failoverInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).PlannedFailoverAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='failoverInput'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PlannedFailoverAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, PlannedFailoverInput failoverInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PlannedFailoverWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, failoverInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='disableProtectionInput'>
            /// </param>
            public static void DisableProtection(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInput disableProtectionInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).DisableProtectionAsync(fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='disableProtectionInput'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DisableProtectionAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, DisableProtectionInput disableProtectionInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DisableProtectionWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, disableProtectionInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            public static ReplicationProtectedItem GetReplicationProtectedItem(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).GetReplicationProtectedItemAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReplicationProtectedItem> GetReplicationProtectedItemAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReplicationProtectedItemWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='input'>
            /// </param>
            public static void EnableProtection(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInput input)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).EnableProtectionAsync(fabricName, protectionContainerName, replicatedProtectedItemName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='input'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task EnableProtectionAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, EnableProtectionInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.EnableProtectionWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, input, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            public static void PurgeProtection(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).PurgeProtectionAsync(fabricName, protectionContainerName, replicatedProtectedItemName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeProtectionAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PurgeProtectionWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='updateProtectionInput'>
            /// </param>
            public static void UpdateProtection(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput)
            {
                Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).UpdateProtectionAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='replicatedProtectedItemName'>
            /// </param>
            /// <param name='updateProtectionInput'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UpdateProtectionAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, string replicatedProtectedItemName, UpdateReplicationProtectedItemInput updateProtectionInput, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.UpdateProtectionWithHttpMessagesAsync(fabricName, protectionContainerName, replicatedProtectedItemName, updateProtectionInput, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            public static IPage<ReplicationProtectedItem> EnumerateReplicationProtectedItems(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).EnumerateReplicationProtectedItemsAsync(fabricName, protectionContainerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// </param>
            /// <param name='protectionContainerName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> EnumerateReplicationProtectedItemsAsync(this IReplicationProtectedItemsControllerOperations operations, string fabricName, string protectionContainerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateReplicationProtectedItemsWithHttpMessagesAsync(fabricName, protectionContainerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// </param>
            public static IPage<ReplicationProtectedItem> EnumerateAllReplicationProtectedItems(this IReplicationProtectedItemsControllerOperations operations, string skipToken = default(string))
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).EnumerateAllReplicationProtectedItemsAsync(skipToken), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skipToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> EnumerateAllReplicationProtectedItemsAsync(this IReplicationProtectedItemsControllerOperations operations, string skipToken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateAllReplicationProtectedItemsWithHttpMessagesAsync(skipToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ReplicationProtectedItem> EnumerateReplicationProtectedItemsNext(this IReplicationProtectedItemsControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).EnumerateReplicationProtectedItemsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> EnumerateReplicationProtectedItemsNextAsync(this IReplicationProtectedItemsControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateReplicationProtectedItemsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ReplicationProtectedItem> EnumerateAllReplicationProtectedItemsNext(this IReplicationProtectedItemsControllerOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IReplicationProtectedItemsControllerOperations)s).EnumerateAllReplicationProtectedItemsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ReplicationProtectedItem>> EnumerateAllReplicationProtectedItemsNextAsync(this IReplicationProtectedItemsControllerOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnumerateAllReplicationProtectedItemsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
