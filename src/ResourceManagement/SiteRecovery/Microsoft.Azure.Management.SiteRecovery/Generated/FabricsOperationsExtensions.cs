// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FabricsOperations.
    /// </summary>
    public static partial class FabricsOperationsExtensions
    {
            /// <summary>
            /// Tracks the Site async operation.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site name to work on.
            /// </param>
            /// <param name='jobName'>
            /// job id to track.
            /// </param>
            public static Fabric TrackAsyncOperation(this IFabricsOperations operations, string fabricName, string jobName)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).TrackAsyncOperationAsync(fabricName, jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tracks the Site async operation.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site name to work on.
            /// </param>
            /// <param name='jobName'>
            /// job id to track.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> TrackAsyncOperationAsync(this IFabricsOperations operations, string fabricName, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TrackAsyncOperationWithHttpMessagesAsync(fabricName, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Perform failover of the process server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the process server.
            /// </param>
            /// <param name='failoverProcessServerRequest'>
            /// The input to the failover process
            /// server operation.
            /// </param>
            public static Fabric ReassociateGateway(this IFabricsOperations operations, string fabricName, FailoverProcessServerRequest failoverProcessServerRequest)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).ReassociateGatewayAsync(fabricName, failoverProcessServerRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Perform failover of the process server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the process server.
            /// </param>
            /// <param name='failoverProcessServerRequest'>
            /// The input to the failover process
            /// server operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> ReassociateGatewayAsync(this IFabricsOperations operations, string fabricName, FailoverProcessServerRequest failoverProcessServerRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReassociateGatewayWithHttpMessagesAsync(fabricName, failoverProcessServerRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Perform failover of the process server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the process server.
            /// </param>
            /// <param name='failoverProcessServerRequest'>
            /// The input to the failover process
            /// server operation.
            /// </param>
            public static Fabric BeginReassociateGateway(this IFabricsOperations operations, string fabricName, FailoverProcessServerRequest failoverProcessServerRequest)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).BeginReassociateGatewayAsync(fabricName, failoverProcessServerRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Perform failover of the process server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// The name of the fabric containing the process server.
            /// </param>
            /// <param name='failoverProcessServerRequest'>
            /// The input to the failover process
            /// server operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginReassociateGatewayAsync(this IFabricsOperations operations, string fabricName, FailoverProcessServerRequest failoverProcessServerRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginReassociateGatewayWithHttpMessagesAsync(fabricName, failoverProcessServerRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deploys a Process Server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Id of the fabric under which the process server is to be
            /// deployed.
            /// </param>
            /// <param name='request'>
            /// The input to deploy a Process Server from Azure Image.
            /// </param>
            public static Fabric DeployProcessServerImage(this IFabricsOperations operations, string fabricName, DeployProcessServerRequest request)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).DeployProcessServerImageAsync(fabricName, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deploys a Process Server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Id of the fabric under which the process server is to be
            /// deployed.
            /// </param>
            /// <param name='request'>
            /// The input to deploy a Process Server from Azure Image.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> DeployProcessServerImageAsync(this IFabricsOperations operations, string fabricName, DeployProcessServerRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeployProcessServerImageWithHttpMessagesAsync(fabricName, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deploys a Process Server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Id of the fabric under which the process server is to be
            /// deployed.
            /// </param>
            /// <param name='request'>
            /// The input to deploy a Process Server from Azure Image.
            /// </param>
            public static Fabric BeginDeployProcessServerImage(this IFabricsOperations operations, string fabricName, DeployProcessServerRequest request)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).BeginDeployProcessServerImageAsync(fabricName, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deploys a Process Server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Id of the fabric under which the process server is to be
            /// deployed.
            /// </param>
            /// <param name='request'>
            /// The input to deploy a Process Server from Azure Image.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginDeployProcessServerImageAsync(this IFabricsOperations operations, string fabricName, DeployProcessServerRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeployProcessServerImageWithHttpMessagesAsync(fabricName, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Renews certificate for the site.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site it to renew certs for.
            /// </param>
            public static Fabric RenewCertificate(this IFabricsOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).RenewCertificateAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renews certificate for the site.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site it to renew certs for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> RenewCertificateAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenewCertificateWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Renews certificate for the site.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site it to renew certs for.
            /// </param>
            public static Fabric BeginRenewCertificate(this IFabricsOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).BeginRenewCertificateAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renews certificate for the site.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site it to renew certs for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginRenewCertificateAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRenewCertificateWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks the consistency of the site.
            /// </summary>
            /// Creates the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site name.
            /// </param>
            public static Fabric CheckConsistency(this IFabricsOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).CheckConsistencyAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks the consistency of the site.
            /// </summary>
            /// Creates the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> CheckConsistencyAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckConsistencyWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Checks the consistency of the site.
            /// </summary>
            /// Creates the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site name.
            /// </param>
            public static Fabric BeginCheckConsistency(this IFabricsOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).BeginCheckConsistencyAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks the consistency of the site.
            /// </summary>
            /// Creates the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginCheckConsistencyAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCheckConsistencyWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the site.
            /// TODO: put a code based DebugAssert to ensure all HttpPosts
            /// have Operation entry made.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site it to delete.
            /// </param>
            public static void Delete(this IFabricsOperations operations, string fabricName)
            {
                Task.Factory.StartNew(s => ((IFabricsOperations)s).DeleteAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the site.
            /// TODO: put a code based DebugAssert to ensure all HttpPosts
            /// have Operation entry made.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site it to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes the site.
            /// TODO: put a code based DebugAssert to ensure all HttpPosts
            /// have Operation entry made.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site it to delete.
            /// </param>
            public static void BeginDelete(this IFabricsOperations operations, string fabricName)
            {
                Task.Factory.StartNew(s => ((IFabricsOperations)s).BeginDeleteAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the site.
            /// TODO: put a code based DebugAssert to ensure all HttpPosts
            /// have Operation entry made.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site it to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the details of a Site.
            /// </summary>
            /// bksdfj kjdfs ajkgdhkg asjhg.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site name of interest.
            /// </param>
            public static Fabric Get(this IFabricsOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).GetAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a Site.
            /// </summary>
            /// bksdfj kjdfs ajkgdhkg asjhg.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site name of interest.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> GetAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates the site.
            /// </summary>
            /// klklfd the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the site.
            /// </param>
            /// <param name='input'>
            /// Site creation input.
            /// </param>
            public static Fabric Create(this IFabricsOperations operations, string fabricName, FabricCreationInput input)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).CreateAsync(fabricName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the site.
            /// </summary>
            /// klklfd the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the site.
            /// </param>
            /// <param name='input'>
            /// Site creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> CreateAsync(this IFabricsOperations operations, string fabricName, FabricCreationInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(fabricName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates the site.
            /// </summary>
            /// klklfd the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the site.
            /// </param>
            /// <param name='input'>
            /// Site creation input.
            /// </param>
            public static Fabric BeginCreate(this IFabricsOperations operations, string fabricName, FabricCreationInput input)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).BeginCreateAsync(fabricName, input), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the site.
            /// </summary>
            /// klklfd the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Name of the site.
            /// </param>
            /// <param name='input'>
            /// Site creation input.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Fabric> BeginCreateAsync(this IFabricsOperations operations, string fabricName, FabricCreationInput input, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(fabricName, input, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purges the site.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site to purge.
            /// </param>
            public static void Purge(this IFabricsOperations operations, string fabricName)
            {
                Task.Factory.StartNew(s => ((IFabricsOperations)s).PurgeAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges the site.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site to purge.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PurgeWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Purges the site.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site to purge.
            /// </param>
            public static void BeginPurge(this IFabricsOperations operations, string fabricName)
            {
                Task.Factory.StartNew(s => ((IFabricsOperations)s).BeginPurgeAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges the site.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Site to purge.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPurgeAsync(this IFabricsOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginPurgeWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of Site registered.
            /// </summary>
            /// registered sites hjg.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Fabric> List(this IFabricsOperations operations)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of Site registered.
            /// </summary>
            /// registered sites hjg.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Fabric>> ListAsync(this IFabricsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of Site registered.
            /// </summary>
            /// registered sites hjg.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Fabric> ListNext(this IFabricsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IFabricsOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of Site registered.
            /// </summary>
            /// registered sites hjg.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Fabric>> ListNextAsync(this IFabricsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
