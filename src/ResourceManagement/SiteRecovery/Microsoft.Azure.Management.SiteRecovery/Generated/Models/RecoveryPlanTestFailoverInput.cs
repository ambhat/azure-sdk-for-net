// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.SiteRecovery;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Recovery plan test failover input.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RecoveryPlanTestFailoverInput
    {
        /// <summary>
        /// Initializes a new instance of the RecoveryPlanTestFailoverInput
        /// class.
        /// </summary>
        public RecoveryPlanTestFailoverInput() { }

        /// <summary>
        /// Initializes a new instance of the RecoveryPlanTestFailoverInput
        /// class.
        /// </summary>
        /// <param name="failoverDirection">Gets or sets the failover
        /// direction. Possible values include: 'PrimaryToRecovery',
        /// 'RecoveryToPrimary'</param>
        /// <param name="networkType">Gets or sets the network type to be used
        /// for test failover.</param>
        /// <param name="networkId">Gets or sets the Id of the network to be
        /// used for test failover.</param>
        /// <param name="skipTestFailoverCleanup">Gets or sets a value
        /// indicating whether the test failover cleanup is to be skipped.
        /// ToDo(LShai): Change such that we do not expose this property
        /// separately.</param>
        /// <param name="providerSpecificDetails">Gets or sets the provider
        /// specific properties.</param>
        public RecoveryPlanTestFailoverInput(string failoverDirection, string networkType, string networkId = default(string), bool? skipTestFailoverCleanup = default(bool?), IList<RecoveryPlanProviderSpecificFailoverInput> providerSpecificDetails = default(IList<RecoveryPlanProviderSpecificFailoverInput>))
        {
            FailoverDirection = failoverDirection;
            NetworkType = networkType;
            NetworkId = networkId;
            SkipTestFailoverCleanup = skipTestFailoverCleanup;
            ProviderSpecificDetails = providerSpecificDetails;
        }

        /// <summary>
        /// Gets or sets the failover direction. Possible values include:
        /// 'PrimaryToRecovery', 'RecoveryToPrimary'
        /// </summary>
        [JsonProperty(PropertyName = "properties.failoverDirection")]
        public string FailoverDirection { get; set; }

        /// <summary>
        /// Gets or sets the network type to be used for test failover.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkType")]
        public string NetworkType { get; set; }

        /// <summary>
        /// Gets or sets the Id of the network to be used for test failover.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkId")]
        public string NetworkId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the test failover cleanup
        /// is to be skipped.
        /// ToDo(LShai): Change such that we do not expose this property
        /// separately.
        /// </summary>
        [JsonProperty(PropertyName = "properties.skipTestFailoverCleanup")]
        public bool? SkipTestFailoverCleanup { get; set; }

        /// <summary>
        /// Gets or sets the provider specific properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.providerSpecificDetails")]
        public IList<RecoveryPlanProviderSpecificFailoverInput> ProviderSpecificDetails { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FailoverDirection == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FailoverDirection");
            }
            if (NetworkType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NetworkType");
            }
        }
    }
}
