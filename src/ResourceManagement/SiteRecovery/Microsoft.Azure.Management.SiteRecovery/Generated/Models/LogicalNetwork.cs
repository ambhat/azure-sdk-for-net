// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.SiteRecovery;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Logical network data model.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class LogicalNetwork : Resource
    {
        /// <summary>
        /// Initializes a new instance of the LogicalNetwork class.
        /// </summary>
        public LogicalNetwork() { }

        /// <summary>
        /// Initializes a new instance of the LogicalNetwork class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource Name</param>
        /// <param name="type">Resource Type</param>
        /// <param name="location">Resource Location</param>
        /// <param name="friendlyName">Gets or sets the Friendly Name.</param>
        /// <param name="networkVirtualizationStatus">Gets or sets a value
        /// indicating whether Network Virtualization is enabled for the
        /// logical network.</param>
        /// <param name="logicalNetworkUsage">Gets or sets a value indicating
        /// whether logical network is used as private test network by test
        /// failover.</param>
        /// <param name="logicalNetworkDefinitionsStatus">Gets or sets a value
        /// indicating whether logical network definitions are
        /// isolated.</param>
        public LogicalNetwork(string id = default(string), string name = default(string), string type = default(string), string location = default(string), string friendlyName = default(string), string networkVirtualizationStatus = default(string), string logicalNetworkUsage = default(string), string logicalNetworkDefinitionsStatus = default(string))
            : base(id, name, type, location)
        {
            FriendlyName = friendlyName;
            NetworkVirtualizationStatus = networkVirtualizationStatus;
            LogicalNetworkUsage = logicalNetworkUsage;
            LogicalNetworkDefinitionsStatus = logicalNetworkDefinitionsStatus;
        }

        /// <summary>
        /// Gets or sets the Friendly Name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether Network Virtualization is
        /// enabled for the logical network.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkVirtualizationStatus")]
        public string NetworkVirtualizationStatus { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether logical network is used as
        /// private test network by test failover.
        /// </summary>
        [JsonProperty(PropertyName = "properties.logicalNetworkUsage")]
        public string LogicalNetworkUsage { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether logical network definitions
        /// are isolated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.logicalNetworkDefinitionsStatus")]
        public string LogicalNetworkDefinitionsStatus { get; set; }

    }
}
