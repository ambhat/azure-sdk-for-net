// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.SiteRecovery;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Recovery plan InMage failover input.
    /// </summary>
    public partial class RecoveryPlanInMageFailoverInput : RecoveryPlanProviderSpecificFailoverInput
    {
        /// <summary>
        /// Initializes a new instance of the RecoveryPlanInMageFailoverInput
        /// class.
        /// </summary>
        public RecoveryPlanInMageFailoverInput() { }

        /// <summary>
        /// Initializes a new instance of the RecoveryPlanInMageFailoverInput
        /// class.
        /// </summary>
        /// <param name="recoveryPointType">Gets or sets the recovery point
        /// type. Possible values include: 'LatestTime', 'LatestTag',
        /// 'Custom'</param>
        /// <param name="canWrite">Gets a value indicating whether this
        /// Newtonsoft.Json.JsonConverter can write JSON</param>
        public RecoveryPlanInMageFailoverInput(string recoveryPointType, bool? canWrite = default(bool?), bool? canRead = default(bool?))
            : base(canWrite, canRead)
        {
            RecoveryPointType = recoveryPointType;
        }

        /// <summary>
        /// Gets or sets the recovery point type. Possible values include:
        /// 'LatestTime', 'LatestTag', 'Custom'
        /// </summary>
        [JsonProperty(PropertyName = "recoveryPointType")]
        public string RecoveryPointType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RecoveryPointType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RecoveryPointType");
            }
        }
    }
}
