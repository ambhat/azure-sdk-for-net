// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for RecoveryServicesProviderOperations.
    /// </summary>
    public static partial class RecoveryServicesProviderOperationsExtensions
    {
            /// <summary>
            /// Refresh the data on the provider.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider name.
            /// </param>
            public static void RefreshProvider(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).RefreshProviderAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refresh the data on the provider.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RefreshProviderAsync(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RefreshProviderWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Refresh the data on the provider.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider name.
            /// </param>
            public static void BeginRefreshProvider(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).BeginRefreshProviderAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Refresh the data on the provider.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric name.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRefreshProviderAsync(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginRefreshProviderWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes provider from fabric.
            /// Note: Deleting provider for any fabric other than SingleHost
            /// is unsupported. To
            /// maintain backward compatibility for released clients the
            /// object "deleteRspInput" is
            /// used (if the object is empty we assume that it is old client
            /// and continue the old
            /// behavior).
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider id.
            /// </param>
            public static void Delete(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).DeleteAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes provider from fabric.
            /// Note: Deleting provider for any fabric other than SingleHost
            /// is unsupported. To
            /// maintain backward compatibility for released clients the
            /// object "deleteRspInput" is
            /// used (if the object is empty we assume that it is old client
            /// and continue the old
            /// behavior).
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes provider from fabric.
            /// Note: Deleting provider for any fabric other than SingleHost
            /// is unsupported. To
            /// maintain backward compatibility for released clients the
            /// object "deleteRspInput" is
            /// used (if the object is empty we assume that it is old client
            /// and continue the old
            /// behavior).
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider id.
            /// </param>
            public static void BeginDelete(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).BeginDeleteAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes provider from fabric.
            /// Note: Deleting provider for any fabric other than SingleHost
            /// is unsupported. To
            /// maintain backward compatibility for released clients the
            /// object "deleteRspInput" is
            /// used (if the object is empty we assume that it is old client
            /// and continue the old
            /// behavior).
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the details of a server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Server id.
            /// </param>
            public static RecoveryServicesProvider Get(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).GetAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a server.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Server id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoveryServicesProvider> GetAsync(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Purges provider from fabric
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider id.
            /// </param>
            public static void Purge(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).PurgeAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges provider from fabric
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeAsync(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PurgeWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Purges provider from fabric
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider id.
            /// </param>
            public static void BeginPurge(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName)
            {
                Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).BeginPurgeAsync(fabricName, providerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Purges provider from fabric
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Unique fabric Id.
            /// </param>
            /// <param name='providerName'>
            /// Unique provider id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPurgeAsync(this IRecoveryServicesProviderOperations operations, string fabricName, string providerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginPurgeWithHttpMessagesAsync(fabricName, providerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of servers registered.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Id of the fabric to be retrieved
            /// </param>
            public static IPage<RecoveryServicesProvider> ListByFabric(this IRecoveryServicesProviderOperations operations, string fabricName)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).ListByFabricAsync(fabricName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of servers registered.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fabricName'>
            /// Id of the fabric to be retrieved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryServicesProvider>> ListByFabricAsync(this IRecoveryServicesProviderOperations operations, string fabricName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFabricWithHttpMessagesAsync(fabricName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of servers registered across fabrics.
            /// This is view only api.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<RecoveryServicesProvider> List(this IRecoveryServicesProviderOperations operations)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of servers registered across fabrics.
            /// This is view only api.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryServicesProvider>> ListAsync(this IRecoveryServicesProviderOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of servers registered.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RecoveryServicesProvider> ListByFabricNext(this IRecoveryServicesProviderOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).ListByFabricNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of servers registered.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryServicesProvider>> ListByFabricNextAsync(this IRecoveryServicesProviderOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByFabricNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of servers registered across fabrics.
            /// This is view only api.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RecoveryServicesProvider> ListNext(this IRecoveryServicesProviderOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IRecoveryServicesProviderOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of servers registered across fabrics.
            /// This is view only api.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RecoveryServicesProvider>> ListNextAsync(this IRecoveryServicesProviderOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
