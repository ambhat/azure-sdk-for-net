// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for JobsOperations.
    /// </summary>
    public static partial class JobsOperationsExtensions
    {
            /// <summary>
            /// Tracks the Site async operation.
            /// </summary>
            /// Only for InitialReplicationTypeContract.Export.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Original Job id on which resume/restart was called.
            /// </param>
            /// <param name='jobName'>
            /// job id to track.
            /// </param>
            public static void TrackAsyncOperation(this IJobsOperations operations, string name, string jobName)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).TrackAsyncOperationAsync(name, jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tracks the Site async operation.
            /// </summary>
            /// Only for InitialReplicationTypeContract.Export.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Original Job id on which resume/restart was called.
            /// </param>
            /// <param name='jobName'>
            /// job id to track.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task TrackAsyncOperationAsync(this IJobsOperations operations, string name, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.TrackAsyncOperationWithHttpMessagesAsync(name, jobName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Resumes the specified job.
            /// </summary>
            /// Only for InitialReplicationTypeContract.Export.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to resume.
            /// </param>
            /// <param name='resumeJobParams'>
            /// Resume rob comments.
            /// </param>
            public static void DeployProcessServerImage(this IJobsOperations operations, string jobName, ResumeJobParams resumeJobParams)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).DeployProcessServerImageAsync(jobName, resumeJobParams), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the specified job.
            /// </summary>
            /// Only for InitialReplicationTypeContract.Export.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to resume.
            /// </param>
            /// <param name='resumeJobParams'>
            /// Resume rob comments.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeployProcessServerImageAsync(this IJobsOperations operations, string jobName, ResumeJobParams resumeJobParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeployProcessServerImageWithHttpMessagesAsync(jobName, resumeJobParams, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Resumes the specified job.
            /// </summary>
            /// Only for InitialReplicationTypeContract.Export.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to resume.
            /// </param>
            /// <param name='resumeJobParams'>
            /// Resume rob comments.
            /// </param>
            public static void BeginDeployProcessServerImage(this IJobsOperations operations, string jobName, ResumeJobParams resumeJobParams)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).BeginDeployProcessServerImageAsync(jobName, resumeJobParams), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the specified job.
            /// </summary>
            /// Only for InitialReplicationTypeContract.Export.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to resume.
            /// </param>
            /// <param name='resumeJobParams'>
            /// Resume rob comments.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeployProcessServerImageAsync(this IJobsOperations operations, string jobName, ResumeJobParams resumeJobParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeployProcessServerImageWithHttpMessagesAsync(jobName, resumeJobParams, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Restarts the specified job.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to restart.
            /// </param>
            public static void Restart(this IJobsOperations operations, string jobName)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).RestartAsync(jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the specified job.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to restart.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RestartAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.RestartWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Restarts the specified job.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to restart.
            /// </param>
            public static void BeginRestart(this IJobsOperations operations, string jobName)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).BeginRestartAsync(jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the specified job.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to restart.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRestartAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginRestartWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Cancels the specified job.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to cancel.
            /// </param>
            public static void Cancel(this IJobsOperations operations, string jobName)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).CancelAsync(jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the specified job.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CancelAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CancelWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Cancels the specified job.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to cancel.
            /// </param>
            public static void BeginCancel(this IJobsOperations operations, string jobName)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).BeginCancelAsync(jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the specified job.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginCancelAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginCancelWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the job details.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to look details for.
            /// </param>
            public static Job Get(this IJobsOperations operations, string jobName)
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).GetAsync(jobName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the job details.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to look details for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets "ExportJobs" workflow details.
            /// Old method: Two APIs were exposed for performing export jobs,
            /// one api
            /// (subscriptions/workflow/computeWorkflowHistory) to trigger the
            /// export jobs workflow and
            /// another api to get the blob information after the workflow has
            /// completed successfully
            /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
            /// New Method: Only one API is exposed to trigger export jobs
            /// workflow, which will trigger
            /// the export jobs workflow, however in order to store the blob
            /// information(blobUri and
            /// sas token) the CustomDetails field associated with the
            /// JobProperties (in Job Object)
            /// is being used. This will be set once the export jobs workflow
            /// completes successfully.
            /// Within custom details, instanceType is set to
            /// "ExportJobsDetails" and fields
            /// "blobUri" and "sasToken" contains the required information
            /// that is necessary to access
            /// exported jobs data.
            /// Note:
            /// 1. Current Implementation only supports one type of
            /// AffectedObjectType and one value
            /// for WorkflowStatus for the filer. Hence the current
            /// implementation only uses the first
            /// value in the corresponding lists.
            /// 2. A dummy Job Entity is created in the Jobs table (this is
            /// marked as internal job)
            /// This job entity can be identified by the Scenario Name which
            /// is set to
            /// "ScenarioName.ExportsJobs".
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// job query filter.
            /// </param>
            public static void Export(this IJobsOperations operations, JobQueryParameter jobQueryParameter)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).ExportAsync(jobQueryParameter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets "ExportJobs" workflow details.
            /// Old method: Two APIs were exposed for performing export jobs,
            /// one api
            /// (subscriptions/workflow/computeWorkflowHistory) to trigger the
            /// export jobs workflow and
            /// another api to get the blob information after the workflow has
            /// completed successfully
            /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
            /// New Method: Only one API is exposed to trigger export jobs
            /// workflow, which will trigger
            /// the export jobs workflow, however in order to store the blob
            /// information(blobUri and
            /// sas token) the CustomDetails field associated with the
            /// JobProperties (in Job Object)
            /// is being used. This will be set once the export jobs workflow
            /// completes successfully.
            /// Within custom details, instanceType is set to
            /// "ExportJobsDetails" and fields
            /// "blobUri" and "sasToken" contains the required information
            /// that is necessary to access
            /// exported jobs data.
            /// Note:
            /// 1. Current Implementation only supports one type of
            /// AffectedObjectType and one value
            /// for WorkflowStatus for the filer. Hence the current
            /// implementation only uses the first
            /// value in the corresponding lists.
            /// 2. A dummy Job Entity is created in the Jobs table (this is
            /// marked as internal job)
            /// This job entity can be identified by the Scenario Name which
            /// is set to
            /// "ScenarioName.ExportsJobs".
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// job query filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ExportAsync(this IJobsOperations operations, JobQueryParameter jobQueryParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ExportWithHttpMessagesAsync(jobQueryParameter, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets "ExportJobs" workflow details.
            /// Old method: Two APIs were exposed for performing export jobs,
            /// one api
            /// (subscriptions/workflow/computeWorkflowHistory) to trigger the
            /// export jobs workflow and
            /// another api to get the blob information after the workflow has
            /// completed successfully
            /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
            /// New Method: Only one API is exposed to trigger export jobs
            /// workflow, which will trigger
            /// the export jobs workflow, however in order to store the blob
            /// information(blobUri and
            /// sas token) the CustomDetails field associated with the
            /// JobProperties (in Job Object)
            /// is being used. This will be set once the export jobs workflow
            /// completes successfully.
            /// Within custom details, instanceType is set to
            /// "ExportJobsDetails" and fields
            /// "blobUri" and "sasToken" contains the required information
            /// that is necessary to access
            /// exported jobs data.
            /// Note:
            /// 1. Current Implementation only supports one type of
            /// AffectedObjectType and one value
            /// for WorkflowStatus for the filer. Hence the current
            /// implementation only uses the first
            /// value in the corresponding lists.
            /// 2. A dummy Job Entity is created in the Jobs table (this is
            /// marked as internal job)
            /// This job entity can be identified by the Scenario Name which
            /// is set to
            /// "ScenarioName.ExportsJobs".
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// job query filter.
            /// </param>
            public static void BeginExport(this IJobsOperations operations, JobQueryParameter jobQueryParameter)
            {
                Task.Factory.StartNew(s => ((IJobsOperations)s).BeginExportAsync(jobQueryParameter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets "ExportJobs" workflow details.
            /// Old method: Two APIs were exposed for performing export jobs,
            /// one api
            /// (subscriptions/workflow/computeWorkflowHistory) to trigger the
            /// export jobs workflow and
            /// another api to get the blob information after the workflow has
            /// completed successfully
            /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
            /// New Method: Only one API is exposed to trigger export jobs
            /// workflow, which will trigger
            /// the export jobs workflow, however in order to store the blob
            /// information(blobUri and
            /// sas token) the CustomDetails field associated with the
            /// JobProperties (in Job Object)
            /// is being used. This will be set once the export jobs workflow
            /// completes successfully.
            /// Within custom details, instanceType is set to
            /// "ExportJobsDetails" and fields
            /// "blobUri" and "sasToken" contains the required information
            /// that is necessary to access
            /// exported jobs data.
            /// Note:
            /// 1. Current Implementation only supports one type of
            /// AffectedObjectType and one value
            /// for WorkflowStatus for the filer. Hence the current
            /// implementation only uses the first
            /// value in the corresponding lists.
            /// 2. A dummy Job Entity is created in the Jobs table (this is
            /// marked as internal job)
            /// This job entity can be identified by the Scenario Name which
            /// is set to
            /// "ScenarioName.ExportsJobs".
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// job query filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginExportAsync(this IJobsOperations operations, JobQueryParameter jobQueryParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginExportWithHttpMessagesAsync(jobQueryParameter, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the list of jobs.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Job> List(this IJobsOperations operations, ODataQuery<JobQueryParameter> odataQuery = default(ODataQuery<JobQueryParameter>))
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).ListAsync(odataQuery), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of jobs.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListAsync(this IJobsOperations operations, ODataQuery<JobQueryParameter> odataQuery = default(ODataQuery<JobQueryParameter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of jobs.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListNext(this IJobsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IJobsOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of jobs.
            /// </summary>
            /// Deletes the site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
