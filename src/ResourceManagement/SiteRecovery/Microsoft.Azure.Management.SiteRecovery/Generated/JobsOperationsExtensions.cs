// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.SiteRecovery
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JobsOperations.
    /// </summary>
    public static partial class JobsOperationsExtensions
    {
            /// <summary>
            /// Tracks the Site async operation.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Original Job id on which resume/restart was called.
            /// </param>
            /// <param name='jobName'>
            /// job id to track.
            /// </param>
            public static Job GetTrackAsyncOperation(this IJobsOperations operations, string name, string jobName)
            {
                return operations.GetTrackAsyncOperationAsync(name, jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Tracks the Site async operation.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Original Job id on which resume/restart was called.
            /// </param>
            /// <param name='jobName'>
            /// job id to track.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetTrackAsyncOperationAsync(this IJobsOperations operations, string name, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTrackAsyncOperationWithHttpMessagesAsync(name, jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to resume.
            /// </param>
            /// <param name='resumeJobParams'>
            /// Resume rob comments.
            /// </param>
            public static Job Resume(this IJobsOperations operations, string jobName, ResumeJobParams resumeJobParams)
            {
                return operations.ResumeAsync(jobName, resumeJobParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to resume.
            /// </param>
            /// <param name='resumeJobParams'>
            /// Resume rob comments.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> ResumeAsync(this IJobsOperations operations, string jobName, ResumeJobParams resumeJobParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeWithHttpMessagesAsync(jobName, resumeJobParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to restart.
            /// </param>
            public static Job Restart(this IJobsOperations operations, string jobName)
            {
                return operations.RestartAsync(jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to restart.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> RestartAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to cancel.
            /// </param>
            public static Job Cancel(this IJobsOperations operations, string jobName)
            {
                return operations.CancelAsync(jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> CancelAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the job details.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to look details for.
            /// </param>
            public static Job Get(this IJobsOperations operations, string jobName)
            {
                return operations.GetAsync(jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the job details.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to look details for.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> GetAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets "ExportJobs" workflow details.
            /// Old method: Two APIs were exposed for performing export jobs, one api
            /// (subscriptions/workflow/computeWorkflowHistory) to trigger the export jobs
            /// workflow and
            /// another api to get the blob information after the workflow has completed
            /// successfully
            /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
            /// New Method: Only one API is exposed to trigger export jobs workflow, which
            /// will trigger
            /// the export jobs workflow, however in order to store the blob
            /// information(blobUri and
            /// sas token) the CustomDetails field associated with the JobProperties (in
            /// Job Object)
            /// is being used. This will be set once the export jobs workflow completes
            /// successfully.
            /// Within custom details, instanceType is set to "ExportJobsDetails" and
            /// fields
            /// "blobUri" and "sasToken" contains the required information that is
            /// necessary to access
            /// exported jobs data.
            /// Note:
            /// 1. Current Implementation only supports one type of AffectedObjectType and
            /// one value
            /// for WorkflowStatus for the filer. Hence the current implementation only
            /// uses the first
            /// value in the corresponding lists.
            /// 2. A dummy Job Entity is created in the Jobs table (this is marked as
            /// internal job)
            /// This job entity can be identified by the Scenario Name which is set to
            /// "ScenarioName.ExportsJobs".
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// job query filter.
            /// </param>
            public static Job Export(this IJobsOperations operations, JobQueryParameter jobQueryParameter)
            {
                return operations.ExportAsync(jobQueryParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets "ExportJobs" workflow details.
            /// Old method: Two APIs were exposed for performing export jobs, one api
            /// (subscriptions/workflow/computeWorkflowHistory) to trigger the export jobs
            /// workflow and
            /// another api to get the blob information after the workflow has completed
            /// successfully
            /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
            /// New Method: Only one API is exposed to trigger export jobs workflow, which
            /// will trigger
            /// the export jobs workflow, however in order to store the blob
            /// information(blobUri and
            /// sas token) the CustomDetails field associated with the JobProperties (in
            /// Job Object)
            /// is being used. This will be set once the export jobs workflow completes
            /// successfully.
            /// Within custom details, instanceType is set to "ExportJobsDetails" and
            /// fields
            /// "blobUri" and "sasToken" contains the required information that is
            /// necessary to access
            /// exported jobs data.
            /// Note:
            /// 1. Current Implementation only supports one type of AffectedObjectType and
            /// one value
            /// for WorkflowStatus for the filer. Hence the current implementation only
            /// uses the first
            /// value in the corresponding lists.
            /// 2. A dummy Job Entity is created in the Jobs table (this is marked as
            /// internal job)
            /// This job entity can be identified by the Scenario Name which is set to
            /// "ScenarioName.ExportsJobs".
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// job query filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> ExportAsync(this IJobsOperations operations, JobQueryParameter jobQueryParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExportWithHttpMessagesAsync(jobQueryParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of jobs.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Job> List(this IJobsOperations operations, ODataQuery<JobQueryParameter> odataQuery = default(ODataQuery<JobQueryParameter>))
            {
                return ((IJobsOperations)operations).ListAsync(odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of jobs.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListAsync(this IJobsOperations operations, ODataQuery<JobQueryParameter> odataQuery = default(ODataQuery<JobQueryParameter>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to resume.
            /// </param>
            /// <param name='resumeJobParams'>
            /// Resume rob comments.
            /// </param>
            public static Job BeginResume(this IJobsOperations operations, string jobName, ResumeJobParams resumeJobParams)
            {
                return operations.BeginResumeAsync(jobName, resumeJobParams).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to resume.
            /// </param>
            /// <param name='resumeJobParams'>
            /// Resume rob comments.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> BeginResumeAsync(this IJobsOperations operations, string jobName, ResumeJobParams resumeJobParams, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeWithHttpMessagesAsync(jobName, resumeJobParams, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to restart.
            /// </param>
            public static Job BeginRestart(this IJobsOperations operations, string jobName)
            {
                return operations.BeginRestartAsync(jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to restart.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> BeginRestartAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRestartWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to cancel.
            /// </param>
            public static Job BeginCancel(this IJobsOperations operations, string jobName)
            {
                return operations.BeginCancelAsync(jobName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels the specified job.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobName'>
            /// Job Id to cancel.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> BeginCancelAsync(this IJobsOperations operations, string jobName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCancelWithHttpMessagesAsync(jobName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets "ExportJobs" workflow details.
            /// Old method: Two APIs were exposed for performing export jobs, one api
            /// (subscriptions/workflow/computeWorkflowHistory) to trigger the export jobs
            /// workflow and
            /// another api to get the blob information after the workflow has completed
            /// successfully
            /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
            /// New Method: Only one API is exposed to trigger export jobs workflow, which
            /// will trigger
            /// the export jobs workflow, however in order to store the blob
            /// information(blobUri and
            /// sas token) the CustomDetails field associated with the JobProperties (in
            /// Job Object)
            /// is being used. This will be set once the export jobs workflow completes
            /// successfully.
            /// Within custom details, instanceType is set to "ExportJobsDetails" and
            /// fields
            /// "blobUri" and "sasToken" contains the required information that is
            /// necessary to access
            /// exported jobs data.
            /// Note:
            /// 1. Current Implementation only supports one type of AffectedObjectType and
            /// one value
            /// for WorkflowStatus for the filer. Hence the current implementation only
            /// uses the first
            /// value in the corresponding lists.
            /// 2. A dummy Job Entity is created in the Jobs table (this is marked as
            /// internal job)
            /// This job entity can be identified by the Scenario Name which is set to
            /// "ScenarioName.ExportsJobs".
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// job query filter.
            /// </param>
            public static Job BeginExport(this IJobsOperations operations, JobQueryParameter jobQueryParameter)
            {
                return operations.BeginExportAsync(jobQueryParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets "ExportJobs" workflow details.
            /// Old method: Two APIs were exposed for performing export jobs, one api
            /// (subscriptions/workflow/computeWorkflowHistory) to trigger the export jobs
            /// workflow and
            /// another api to get the blob information after the workflow has completed
            /// successfully
            /// (subscriptions/workflow/{workflowId}/blobUrlWithSASKey)
            /// New Method: Only one API is exposed to trigger export jobs workflow, which
            /// will trigger
            /// the export jobs workflow, however in order to store the blob
            /// information(blobUri and
            /// sas token) the CustomDetails field associated with the JobProperties (in
            /// Job Object)
            /// is being used. This will be set once the export jobs workflow completes
            /// successfully.
            /// Within custom details, instanceType is set to "ExportJobsDetails" and
            /// fields
            /// "blobUri" and "sasToken" contains the required information that is
            /// necessary to access
            /// exported jobs data.
            /// Note:
            /// 1. Current Implementation only supports one type of AffectedObjectType and
            /// one value
            /// for WorkflowStatus for the filer. Hence the current implementation only
            /// uses the first
            /// value in the corresponding lists.
            /// 2. A dummy Job Entity is created in the Jobs table (this is marked as
            /// internal job)
            /// This job entity can be identified by the Scenario Name which is set to
            /// "ScenarioName.ExportsJobs".
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobQueryParameter'>
            /// job query filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Job> BeginExportAsync(this IJobsOperations operations, JobQueryParameter jobQueryParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginExportWithHttpMessagesAsync(jobQueryParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the list of jobs.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Job> ListNext(this IJobsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the list of jobs.
            /// </summary>
            /// <remarks>
            /// TODO (avrai): Detailed Description.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Job>> ListNextAsync(this IJobsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
